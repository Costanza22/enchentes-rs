#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo de An√°lise de Dados de Enchentes no Rio Grande do Sul
Demonstra como usar os datasets criados para an√°lises espec√≠ficas
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

def exemplo_analise_basica():
    """Exemplo de an√°lise b√°sica dos dados"""
    print("üîç EXEMPLO DE AN√ÅLISE B√ÅSICA")
    print("=" * 40)
    
    # Carregar dados
    df = pd.read_csv('../data/enchentes_rs.csv')
    df['data'] = pd.to_datetime(df['data'])
    
    # 1. An√°lise de tend√™ncias temporais
    print("\n1. üìà AN√ÅLISE DE TEND√äNCIAS TEMPORAIS")
    
    # Agrupamento por ano
    df_anual = df.groupby(df['data'].dt.year).agg({
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum',
        'feridos': 'sum'
    }).reset_index()
    
    print("Evolu√ß√£o anual dos impactos:")
    print(df_anual.to_string(index=False))
    
    # 2. An√°lise regional
    print("\n2. üó∫Ô∏è AN√ÅLISE REGIONAL")
    
    df_regional = df.groupby('regiao').agg({
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum',
        'feridos': 'sum'
    }).round(2)
    
    print("Impactos por regi√£o:")
    print(df_regional)
    
    # 3. An√°lise sazonal
    print("\n3. üìÖ AN√ÅLISE SAZONAL")
    
    df_sazonal = df.groupby(df['data'].dt.month).agg({
        'desalojados': 'mean',
        'prejuizo_milhoes': 'mean'
    }).round(2)
    
    meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
             'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    
    df_sazonal.index = [meses[i-1] for i in df_sazonal.index]
    print("M√©dias mensais:")
    print(df_sazonal)
    
    return df, df_anual, df_regional, df_sazonal

def exemplo_visualizacoes():
    """Exemplo de cria√ß√£o de visualiza√ß√µes"""
    print("\nüé® EXEMPLO DE VISUALIZA√á√ïES")
    print("=" * 40)
    
    df, df_anual, df_regional, df_sazonal = exemplo_analise_basica()
    
    # Configura√ß√µes de estilo
    plt.style.use('seaborn-v0_8')
    sns.set_palette("husl")
    
    # 1. Gr√°fico de linha temporal
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    plt.plot(df_anual['data'], df_anual['desalojados'], marker='o', linewidth=2, color='blue')
    plt.title('Evolu√ß√£o dos Desalojados por Ano')
    plt.ylabel('N√∫mero de Desalojados')
    plt.grid(True, alpha=0.3)
    
    plt.subplot(2, 2, 2)
    plt.plot(df_anual['data'], df_anual['prejuizo_milhoes'], marker='s', linewidth=2, color='red')
    plt.title('Evolu√ß√£o dos Preju√≠zos por Ano')
    plt.ylabel('Preju√≠zo (R$ milh√µes)')
    plt.grid(True, alpha=0.3)
    
    plt.subplot(2, 2, 3)
    plt.bar(df_regional.index, df_regional['desalojados'], color=['#FF6B6B', '#4ECDC4'])
    plt.title('Total de Desalojados por Regi√£o')
    plt.ylabel('N√∫mero de Desalojados')
    plt.xticks(rotation=45)
    
    plt.subplot(2, 2, 4)
    plt.bar(df_sazonal.index, df_sazonal['desalojados'], color='skyblue')
    plt.title('M√©dia de Desalojados por M√™s')
    plt.ylabel('M√©dia de Desalojados')
    plt.xticks(rotation=45)
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ Visualiza√ß√µes criadas com sucesso!")

def exemplo_analise_avancada():
    """Exemplo de an√°lise avan√ßada"""
    print("\nüöÄ EXEMPLO DE AN√ÅLISE AVAN√áADA")
    print("=" * 40)
    
    df = pd.read_csv('../data/enchentes_rs.csv')
    df['data'] = pd.to_datetime(df['data'])
    
    # 1. Correla√ß√£o entre vari√°veis
    print("1. üîó AN√ÅLISE DE CORRELA√á√ïES")
    
    colunas_numericas = ['mortes', 'feridos', 'desalojados', 'prejuizo_milhoes', 
                         'altura_rio_metros', 'chuva_24h_mm']
    
    correlacoes = df[colunas_numericas].corr()
    
    print("Matriz de correla√ß√£o:")
    print(correlacoes.round(3))
    
    # 2. An√°lise de outliers
    print("\n2. üìä AN√ÅLISE DE OUTLIERS")
    
    # Usar IQR para identificar outliers
    Q1 = df['desalojados'].quantile(0.25)
    Q3 = df['desalojados'].quantile(0.75)
    IQR = Q3 - Q1
    
    outliers = df[(df['desalojados'] < (Q1 - 1.5 * IQR)) | 
                  (df['desalojados'] > (Q3 + 1.5 * IQR))]
    
    print(f"Outliers encontrados: {len(outliers)}")
    if len(outliers) > 0:
        print("Registros com outliers:")
        print(outliers[['data', 'cidade', 'desalojados']].head())
    
    # 3. An√°lise de clusters por cidade
    print("\n3. üèôÔ∏è AN√ÅLISE DE CLUSTERS POR CIDADE")
    
    df_cidades = df.groupby('cidade').agg({
        'desalojados': 'mean',
        'prejuizo_milhoes': 'mean',
        'feridos': 'mean'
    }).round(2)
    
    # Normalizar dados para an√°lise
    from sklearn.preprocessing import StandardScaler
    
    scaler = StandardScaler()
    df_normalizado = pd.DataFrame(
        scaler.fit_transform(df_cidades),
        columns=df_cidades.columns,
        index=df_cidades.index
    )
    
    print("Cidades com maior impacto m√©dio:")
    print(df_cidades.nlargest(5, 'desalojados'))
    
    return df, correlacoes, outliers, df_cidades

def exemplo_enchente_2024():
    """Exemplo espec√≠fico da an√°lise da enchente de 2024"""
    print("\nüö® EXEMPLO DA ENCHENTE DE 2024")
    print("=" * 40)
    
    try:
        df_2024 = pd.read_csv('../data/enchente_2024_detalhado.csv')
        df_2024['data'] = pd.to_datetime(df_2024['data'])
        
        print(f"üìÖ Per√≠odo da crise: {df_2024['data'].min().strftime('%d/%m/%Y')} a {df_2024['data'].max().strftime('%d/%m/%Y')}")
        print(f"üèôÔ∏è Cidades afetadas: {df_2024['cidade'].nunique()}")
        
        # An√°lise da evolu√ß√£o da crise
        print("\nüìà EVOLU√á√ÉO DA CRISE:")
        
        df_evolucao = df_2024.groupby('data').agg({
            'desalojados': 'sum',
            'feridos': 'sum',
            'prejuizo_milhoes': 'sum'
        }).reset_index()
        
        print("Evolu√ß√£o di√°ria dos impactos:")
        print(df_evolucao.to_string(index=False))
        
        # Gr√°fico da evolu√ß√£o
        plt.figure(figsize=(12, 8))
        
        plt.subplot(2, 2, 1)
        plt.plot(df_evolucao['data'], df_evolucao['desalojados'], marker='o', linewidth=2, color='red')
        plt.title('Evolu√ß√£o dos Desalojados - Crise 2024')
        plt.ylabel('N√∫mero de Desalojados')
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
        
        plt.subplot(2, 2, 2)
        plt.plot(df_evolucao['data'], df_evolucao['prejuizo_milhoes'], marker='s', linewidth=2, color='orange')
        plt.title('Evolu√ß√£o dos Preju√≠zos - Crise 2024')
        plt.ylabel('Preju√≠zo (R$ milh√µes)')
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
        
        plt.subplot(2, 2, 3)
        plt.plot(df_evolucao['data'], df_evolucao['feridos'], marker='^', linewidth=2, color='purple')
        plt.title('Evolu√ß√£o dos Feridos - Crise 2024')
        plt.ylabel('N√∫mero de Feridos')
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
        
        # An√°lise por cidade
        plt.subplot(2, 2, 4)
        df_cidades_crise = df_2024.groupby('cidade')['desalojados'].max().sort_values(ascending=False)
        plt.bar(df_cidades_crise.index, df_cidades_crise.values, color='lightcoral')
        plt.title('M√°ximo de Desalojados por Cidade - Crise 2024')
        plt.ylabel('M√°ximo de Desalojados')
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.show()
        
        print("‚úÖ An√°lise da enchente de 2024 conclu√≠da!")
        
    except FileNotFoundError:
        print("‚ùå Dataset de 2024 n√£o encontrado. Verifique se o arquivo existe.")

def main():
    """Fun√ß√£o principal que executa todos os exemplos"""
    print("üéØ EXEMPLOS DE AN√ÅLISE DE DADOS DE ENCHENTES NO RS")
    print("=" * 60)
    
    try:
        # Executar exemplos
        exemplo_analise_basica()
        exemplo_visualizacoes()
        exemplo_analise_avancada()
        exemplo_enchente_2024()
        
        print("\nüéâ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!")
        print("üìÅ Verifique os gr√°ficos gerados e use os c√≥digos como base para suas an√°lises.")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
