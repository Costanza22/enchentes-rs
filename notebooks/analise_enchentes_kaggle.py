#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üåä AN√ÅLISE COMPLETA DAS ENCHENTES NO RIO GRANDE DO SUL (2020-2024)

Este script apresenta uma an√°lise abrangente dos impactos das enchentes no Rio Grande do Sul, 
incluindo a crise hist√≥rica de 2024. Atrav√©s de visualiza√ß√µes interativas e an√°lises estat√≠sticas, 
exploramos padr√µes temporais, vulnerabilidades regionais e correla√ß√µes entre vari√°veis.

üéØ OBJETIVOS DA AN√ÅLISE:
1. An√°lise Temporal: Evolu√ß√£o dos impactos ao longo dos anos
2. An√°lise Regional: Compara√ß√£o entre Metropolitana e Serra
3. An√°lise da Crise 2024: Dados detalhados da emerg√™ncia
4. Correla√ß√µes: Rela√ß√µes entre vari√°veis hidrol√≥gicas e sociais
5. Insights: Padr√µes e vulnerabilidades identificadas

üìä DATASETS UTILIZADOS:
- enchentes_rs.csv: 60 registros de 2020-2024
- enchente_2024_detalhado.csv: 32 registros da crise de 2024

Autor: [Seu Nome]
Data: 2024
Licen√ßa: CC0-1.0 (Dom√≠nio P√∫blico)
"""

# =============================================================================
# üìö IMPORTA√á√ÉO DE BIBLIOTECAS E CONFIGURA√á√ïES
# =============================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings

# Configura√ß√µes de visualiza√ß√£o
warnings.filterwarnings('ignore')
plt.style.use('default')
sns.set_palette("husl")

# Configura√ß√µes do matplotlib para melhor qualidade
plt.rcParams['figure.dpi'] = 100
plt.rcParams['savefig.dpi'] = 300
plt.rcParams['font.size'] = 10

print("‚úÖ Bibliotecas importadas com sucesso!")
print(f"üìä Pandas version: {pd.__version__}")
print(f"üìà Matplotlib version: {plt.matplotlib.__version__}")
print(f"üé® Seaborn version: {sns.__version__}")
print("=" * 60)

# =============================================================================
# üìÅ CARREGAMENTO DOS DADOS
# =============================================================================

def carregar_dados():
    """Carrega os datasets de enchentes"""
    try:
        # Carregamento dos datasets
        df_principal = pd.read_csv('../input/enchentes-rs-impactos/enchentes_rs.csv')
        df_2024 = pd.read_csv('../input/enchentes-rs-impactos/enchente_2024_detalhado.csv')
        
        print("üìä DATASETS CARREGADOS:")
        print("=" * 50)
        print(f"Dataset Principal: {df_principal.shape[0]} registros, {df_principal.shape[1]} colunas")
        print(f"Dataset 2024: {df_2024.shape[0]} registros, {df_2024.shape[1]} colunas")
        print(f"Total: {df_principal.shape[0] + df_2024.shape[0]} registros")
        
        print("\nüìã COLUNAS DISPON√çVEIS:")
        print("Dataset Principal:", list(df_principal.columns))
        print("Dataset 2024:", list(df_2024.columns))
        
        return df_principal, df_2024
        
    except FileNotFoundError as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        print("üí° Verifique se os arquivos CSV est√£o na pasta correta")
        return None, None

# =============================================================================
# üîç EXPLORA√á√ÉO INICIAL DOS DADOS
# =============================================================================

def explorar_dados(df_principal, df_2024):
    """Realiza explora√ß√£o inicial dos datasets"""
    print("\nüîç EXPLORA√á√ÉO INICIAL DOS DADOS")
    print("=" * 50)
    
    # Informa√ß√µes b√°sicas dos datasets
    print("üìä INFORMA√á√ïES DO DATASET PRINCIPAL:")
    print("-" * 40)
    print(df_principal.info())
    
    print("\nüìä INFORMA√á√ïES DO DATASET 2024:")
    print("-" * 40)
    print(df_2024.info())
    
    # Estat√≠sticas descritivas
    print("\nüìà ESTAT√çSTICAS DESCRITIVAS - DATASET PRINCIPAL:")
    print("-" * 50)
    print(df_principal.describe())
    
    print("\nüìà ESTAT√çSTICAS DESCRITIVAS - DATASET 2024:")
    print("-" * 50)
    print(df_2024.describe())
    
    # Verifica√ß√£o de valores √∫nicos
    print("\nüèôÔ∏è CIDADES INCLU√çDAS:")
    print("-" * 30)
    print("Dataset Principal:", df_principal['cidade'].unique())
    print("Dataset 2024:", df_2024['cidade'].unique())
    
    print("\nüåç REGI√ïES:")
    print("-" * 20)
    print("Dataset Principal:", df_principal['regiao'].unique())
    print("Dataset 2024:", df_2024['regiao'].unique())
    
    print("\nüìÖ PER√çODO COBERTO:")
    print("-" * 30)
    print(f"Dataset Principal: {df_principal['data'].min()} a {df_principal['data'].max()}")
    print(f"Dataset 2024: {df_2024['data'].min()} a {df_2024['data'].max()}")

# =============================================================================
# üìÖ AN√ÅLISE TEMPORAL DOS IMPACTOS
# =============================================================================

def analise_temporal(df_principal, df_2024):
    """Realiza an√°lise temporal dos impactos"""
    print("\nüìÖ AN√ÅLISE TEMPORAL DOS IMPACTOS")
    print("=" * 50)
    
    # Prepara√ß√£o dos dados para an√°lise temporal
    df_principal['data'] = pd.to_datetime(df_principal['data'])
    df_2024['data'] = pd.to_datetime(df_2024['data'])
    
    # Agrega√ß√£o anual
    df_anual = df_principal.groupby(df_principal['data'].dt.year).agg({
        'mortes': 'sum',
        'feridos': 'sum',
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum'
    }).reset_index()
    
    print("üìä IMPACTOS ANUAIS (2020-2024):")
    print("-" * 40)
    print(df_anual.round(2))
    
    # Gr√°fico de evolu√ß√£o temporal dos impactos
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üìà Evolu√ß√£o Temporal dos Impactos das Enchentes no RS (2020-2024)', fontsize=16)
    
    # Mortes
    axes[0, 0].plot(df_anual['data'], df_anual['mortes'], 'ro-', linewidth=2, markersize=8)
    axes[0, 0].set_title('Mortes', fontweight='bold')
    axes[0, 0].set_ylabel('N√∫mero de Mortes')
    axes[0, 0].grid(True, alpha=0.3)
    
    # Feridos
    axes[0, 1].plot(df_anual['data'], df_anual['feridos'], 'o-', color='orange', linewidth=2, markersize=8)
    axes[0, 1].set_title('Feridos', fontweight='bold')
    axes[0, 1].set_ylabel('N√∫mero de Feridos')
    axes[0, 1].grid(True, alpha=0.3)
    
    # Desalojados
    axes[1, 0].plot(df_anual['data'], df_anual['desalojados'], 'bo-', linewidth=2, markersize=8)
    axes[1, 0].set_title('Desalojados', fontweight='bold')
    axes[1, 0].set_ylabel('N√∫mero de Desalojados')
    axes[1, 0].grid(True, alpha=0.3)
    
    # Preju√≠zos
    axes[1, 1].plot(df_anual['data'], df_anual['prejuizo_milhoes'], 'mo-', linewidth=2, markersize=8)
    axes[1, 1].set_title('Preju√≠zos (Milh√µes R$)', fontweight='bold')
    axes[1, 1].set_ylabel('Preju√≠zos (Milh√µes R$)')
    axes[1, 1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return df_anual

# =============================================================================
# üåç AN√ÅLISE REGIONAL DOS IMPACTOS
# =============================================================================

def analise_regional(df_principal):
    """Realiza an√°lise regional dos impactos"""
    print("\nüåç AN√ÅLISE REGIONAL DOS IMPACTOS")
    print("=" * 50)
    
    # An√°lise por regi√£o
    df_regional = df_principal.groupby('regiao').agg({
        'mortes': 'sum',
        'feridos': 'sum',
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum',
        'cidade': 'count'
    }).rename(columns={'cidade': 'eventos'}).round(2)
    
    print("üåç IMPACTOS POR REGI√ÉO:")
    print("-" * 40)
    print(df_regional)
    
    # Gr√°fico de compara√ß√£o regional
    fig, ax = plt.subplots(figsize=(12, 6))
    
    x = np.arange(len(df_regional.index))
    width = 0.2
    
    ax.bar(x - width*1.5, df_regional['mortes'], width, label='Mortes', color='red', alpha=0.8)
    ax.bar(x - width*0.5, df_regional['feridos'], width, label='Feridos', color='orange', alpha=0.8)
    ax.bar(x + width*0.5, df_regional['desalojados'], width, label='Desalojados', color='blue', alpha=0.8)
    ax.bar(x + width*1.5, df_regional['prejuizo_milhoes'], width, label='Preju√≠zos (Milh√µes)', color='purple', alpha=0.8)
    
    ax.set_xlabel('Regi√£o', fontweight='bold')
    ax.set_ylabel('Quantidade', fontweight='bold')
    ax.set_title('üìä Compara√ß√£o de Impactos por Regi√£o', fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels(df_regional.index)
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    # An√°lise por cidade
    df_cidades = df_principal.groupby('cidade').agg({
        'mortes': 'sum',
        'feridos': 'sum',
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum'
    }).round(2).sort_values('desalojados', ascending=False)
    
    print("\nüèôÔ∏è IMPACTOS POR CIDADE (Ordenado por Desalojados):")
    print("-" * 60)
    print(df_cidades)
    
    # Gr√°fico de impacto por cidade
    plt.figure(figsize=(12, 6))
    bars = plt.bar(df_cidades.index, df_cidades['desalojados'], 
                   color=plt.cm.Blues(np.linspace(0.3, 0.8, len(df_cidades))))
    
    plt.title('üèôÔ∏è Total de Desalojados por Cidade (2020-2024)', fontsize=14, fontweight='bold')
    plt.xlabel('Cidade', fontweight='bold')
    plt.ylabel('Total de Desalojados', fontweight='bold')
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, alpha=0.3)
    
    # Adicionar valores nas barras
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                 f'{int(height):,}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.show()
    
    return df_regional, df_cidades

# =============================================================================
# üö® AN√ÅLISE DA CRISE DE 2024
# =============================================================================

def analise_crise_2024(df_2024):
    """Realiza an√°lise espec√≠fica da crise de 2024"""
    print("\nüö® AN√ÅLISE DA CRISE DE 2024")
    print("=" * 50)
    
    # An√°lise da crise de 2024
    print("üö® AN√ÅLISE DA CRISE DE 2024:")
    print("-" * 40)
    print(f"Per√≠odo: {df_2024['data'].min().strftime('%d/%m/%Y')} a {df_2024['data'].max().strftime('%d/%m/%Y')}")
    print(f"Total de registros: {len(df_2024)}")
    print(f"Cidades afetadas: {df_2024['cidade'].nunique()}")
    print(f"Total de mortes: {df_2024['mortes'].sum()}")
    print(f"Total de feridos: {df_2024['feridos'].sum()}")
    print(f"Total de desalojados: {df_2024['desalojados'].sum()}")
    print(f"Preju√≠zos totais: R$ {df_2024['prejuizo_milhoes'].sum():.2f} milh√µes")
    
    # Evolu√ß√£o di√°ria da crise de 2024
    df_2024_diario = df_2024.groupby('data').agg({
        'mortes': 'sum',
        'feridos': 'sum',
        'desalojados': 'sum',
        'prejuizo_milhoes': 'sum'
    }).reset_index()
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üö® Evolu√ß√£o Di√°ria da Crise de Enchentes de 2024 no RS', fontsize=16, fontweight='bold')
    
    # Mortes di√°rias
    axes[0, 0].plot(df_2024_diario['data'], df_2024_diario['mortes'], 'ro-', linewidth=2, markersize=6)
    axes[0, 0].set_title('Mortes Di√°rias', fontweight='bold')
    axes[0, 0].set_ylabel('Mortes')
    axes[0, 0].grid(True, alpha=0.3)
    axes[0, 0].tick_params(axis='x', rotation=45)
    
    # Feridos di√°rios
    axes[0, 1].plot(df_2024_diario['data'], df_2024_diario['feridos'], 'o-', color='orange', linewidth=2, markersize=6)
    axes[0, 1].set_title('Feridos Di√°rios', fontweight='bold')
    axes[0, 1].set_ylabel('Feridos')
    axes[0, 1].grid(True, alpha=0.3)
    axes[0, 1].tick_params(axis='x', rotation=45)
    
    # Desalojados di√°rios
    axes[1, 0].plot(df_2024_diario['data'], df_2024_diario['desalojados'], 'bo-', linewidth=2, markersize=6)
    axes[1, 0].set_title('Desalojados Di√°rios', fontweight='bold')
    axes[1, 0].set_ylabel('Desalojados')
    axes[1, 0].grid(True, alpha=0.3)
    axes[1, 0].tick_params(axis='x', rotation=45)
    
    # Preju√≠zos di√°rios
    axes[1, 1].plot(df_2024_diario['data'], df_2024_diario['prejuizo_milhoes'], 'mo-', linewidth=2, markersize=6)
    axes[1, 1].set_title('Preju√≠zos Di√°rios (Milh√µes R$)', fontweight='bold')
    axes[1, 1].set_ylabel('Preju√≠zos (Milh√µes R$)')
    axes[1, 1].grid(True, alpha=0.3)
    axes[1, 1].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.show()
    
    return df_2024_diario

# =============================================================================
# üîó AN√ÅLISE DE CORRELA√á√ïES
# =============================================================================

def analise_correlacoes(df_principal):
    """Realiza an√°lise de correla√ß√µes entre vari√°veis"""
    print("\nüîó AN√ÅLISE DE CORRELA√á√ïES")
    print("=" * 50)
    
    # Matriz de correla√ß√£o
    colunas_numericas = ['mortes', 'feridos', 'desalojados', 'prejuizo_milhoes', 
                         'altura_rio_metros', 'chuva_24h_mm']
    
    correlacao = df_principal[colunas_numericas].corr()
    
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlacao, annot=True, cmap='RdBu_r', center=0, 
                square=True, linewidths=0.5, cbar_kws={'shrink': 0.8})
    plt.title('üîó Matriz de Correla√ß√£o entre Vari√°veis', fontweight='bold')
    plt.tight_layout()
    plt.show()
    
    print("üìä MATRIZ DE CORRELA√á√ÉO:")
    print("-" * 40)
    print(correlacao.round(3))
    
    # Gr√°fico de dispers√£o: Altura do rio vs Desalojados
    plt.figure(figsize=(10, 6))
    
    scatter = plt.scatter(df_principal['altura_rio_metros'], df_principal['desalojados'], 
                          c=df_principal['prejuizo_milhoes'], s=df_principal['prejuizo_milhoes']*10,
                          cmap='viridis', alpha=0.7)
    
    plt.colorbar(scatter, label='Preju√≠zos (Milh√µes R$)')
    plt.xlabel('Altura do Rio (metros)', fontweight='bold')
    plt.ylabel('N√∫mero de Desalojados', fontweight='bold')
    plt.title('üåä Rela√ß√£o entre Altura do Rio e Desalojados', fontweight='bold')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return correlacao

# =============================================================================
# üìä AN√ÅLISE SAZONAL
# =============================================================================

def analise_sazonal(df_principal):
    """Realiza an√°lise sazonal dos impactos"""
    print("\nüìä AN√ÅLISE SAZONAL")
    print("=" * 50)
    
    # An√°lise sazonal por m√™s
    df_principal['mes'] = df_principal['data'].dt.month
    df_sazonal = df_principal.groupby('mes').agg({
        'mortes': 'mean',
        'feridos': 'mean',
        'desalojados': 'mean',
        'prejuizo_milhoes': 'mean'
    }).round(2)
    
    # Nomes dos meses
    meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
             'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    df_sazonal.index = [meses[i-1] for i in df_sazonal.index]
    
    print("üìÖ IMPACTOS M√âDIOS POR M√äS:")
    print("-" * 40)
    print(df_sazonal)
    
    # Gr√°fico sazonal
    plt.figure(figsize=(12, 6))
    
    for col in df_sazonal.columns:
        plt.plot(df_sazonal.index, df_sazonal[col], 'o-', linewidth=2, markersize=6, label=col)
    
    plt.title('üìÖ Padr√µes Sazonais dos Impactos das Enchentes', fontsize=14, fontweight='bold')
    plt.xlabel('M√™s', fontweight='bold')
    plt.ylabel('Impacto M√©dio', fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return df_sazonal

# =============================================================================
# üéØ INSIGHTS E CONCLUS√ïES
# =============================================================================

def mostrar_insights():
    """Mostra os principais insights identificados"""
    print("\nüéØ INSIGHTS E CONCLUS√ïES")
    print("=" * 50)
    
    print("üéØ PRINCIPAIS INSIGHTS IDENTIFICADOS:")
    print("-" * 50)
    
    print("\nüìà TEND√äNCIAS TEMPORAIS:")
    print("‚Ä¢ Aumento gradual dos impactos de 2020 a 2024")
    print("‚Ä¢ Picos sazonais nos meses de abril e maio")
    print("‚Ä¢ Crise de 2024 sem precedentes hist√≥ricos")
    
    print("\nüåç VULNERABILIDADES REGIONAIS:")
    print("‚Ä¢ Regi√£o metropolitana concentra os maiores impactos")
    print("‚Ä¢ Porto Alegre √© a cidade mais afetada")
    print("‚Ä¢ Serra apresenta impactos menores mas significativos")
    
    print("\nüîó CORRELA√á√ïES IDENTIFICADAS:")
    print("‚Ä¢ Forte correla√ß√£o entre altura do rio e n√∫mero de desalojados")
    print("‚Ä¢ Rela√ß√£o direta entre precipita√ß√£o e preju√≠zos econ√¥micos")
    print("‚Ä¢ Padr√µes consistentes de resposta a emerg√™ncias")
    
    print("\nüö® LI√á√ïES DA CRISE DE 2024:")
    print("‚Ä¢ Necessidade de sistemas de alerta mais eficazes")
    print("‚Ä¢ Import√¢ncia do planejamento urbano resiliente")
    print("‚Ä¢ Valor dos dados hist√≥ricos para preven√ß√£o")

# =============================================================================
# üöÄ FUN√á√ÉO PRINCIPAL
# =============================================================================

def main():
    """Fun√ß√£o principal que executa toda a an√°lise"""
    print("üåä AN√ÅLISE COMPLETA DAS ENCHENTES NO RIO GRANDE DO SUL (2020-2024)")
    print("=" * 80)
    print("üöÄ Iniciando an√°lise...")
    
    # 1. Carregar dados
    df_principal, df_2024 = carregar_dados()
    
    if df_principal is None or df_2024 is None:
        print("‚ùå N√£o foi poss√≠vel carregar os dados. Verifique os arquivos CSV.")
        return
    
    # 2. Explora√ß√£o inicial
    explorar_dados(df_principal, df_2024)
    
    # 3. An√°lise temporal
    df_anual = analise_temporal(df_principal, df_2024)
    
    # 4. An√°lise regional
    df_regional, df_cidades = analise_regional(df_principal)
    
    # 5. An√°lise da crise de 2024
    df_2024_diario = analise_crise_2024(df_2024)
    
    # 6. An√°lise de correla√ß√µes
    correlacao = analise_correlacoes(df_principal)
    
    # 7. An√°lise sazonal
    df_sazonal = analise_sazonal(df_principal)
    
    # 8. Mostrar insights
    mostrar_insights()
    
    # 9. Resumo final
    print("\nüéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
    print("=" * 50)
    print("üìä Resumo dos resultados:")
    print(f"‚Ä¢ Dataset Principal: {df_principal.shape[0]} registros analisados")
    print(f"‚Ä¢ Dataset 2024: {df_2024.shape[0]} registros da crise")
    print(f"‚Ä¢ Per√≠odo coberto: {df_principal['data'].min().year} a {df_principal['data'].max().year}")
    print(f"‚Ä¢ Cidades analisadas: {df_principal['cidade'].nunique()}")
    print(f"‚Ä¢ Regi√µes: {df_principal['regiao'].nunique()}")
    
    print("\nüí° Pr√≥ximos passos recomendados:")
    print("‚Ä¢ Analisar padr√µes espec√≠ficos por cidade")
    print("‚Ä¢ Desenvolver modelos preditivos")
    print("‚Ä¢ Comparar com dados de outros estados")
    print("‚Ä¢ Criar dashboards interativos")
    
    print("\nüìû Para d√∫vidas e contribui√ß√µes:")
    print("‚Ä¢ Use os coment√°rios no Kaggle")
    print("‚Ä¢ Compartilhe seus insights")
    print("‚Ä¢ Sugira melhorias para o dataset")

# =============================================================================
# üöÄ EXECU√á√ÉO DO SCRIPT
# =============================================================================

if __name__ == "__main__":
    main()
